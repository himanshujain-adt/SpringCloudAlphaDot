package com.alpha.user.service;

import java.lang.System.Logger;
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;
import java.util.stream.Collectors;

import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;

import com.alpha.user.entites.Hotel;
import com.alpha.user.entites.Rating;
import com.alpha.user.entites.User;
import com.alpha.user.exceptions.ResourceNotFoundException;
import com.alpha.user.repositories.UserRepository;

@Service
public class UserServiceImpl implements UserServiceInt {
	@Autowired
	private UserRepository userRepository;

	@Autowired
	private RestTemplate restTemplate;

	// private Logger logger = (Logger)
	// LoggerFactory.getLogger(UserServiceImpl.class);

	@Override
	public User saveUser(User user) {
		// TODO Auto-generated method stub
		String randomUserId = UUID.randomUUID().toString();
		user.setUserId(randomUserId);
		return userRepository.save(user);
	}

	@Override
	public List<User> getAllUser() {
		// TODO Auto-generated method stub
		return userRepository.findAll();
	}

	@Override
	public User getUser(String userId) {
		// TODO Auto-generated method stub
		User user = userRepository.findById(userId).orElseThrow(
				() -> new ResourceNotFoundException("User with given id is not found on server !!!:" + userId));
		ArrayList<Rating> ratingOfUser = restTemplate
				.getForObject("http://localhost:8091/ratings/getByUserId/" + user.getUserId(), ArrayList.class);
		// ((org.slf4j.Logger) logger).info("", forObject);
		ArrayList<Rating> ratingList=ratingOfUser.stream().map(rating -> {
			//return rating.getHotelId();
			ResponseEntity<Hotel> forEntity=restTemplate.getForEntity("http://localhost:8090/hotels/getById/c30b713d-c5cb-4da1-b515-6c59d50fec9a", Hotel.class);
		  Hotel hotel=forEntity.getBody();
		}).collect(Collectors.toList());
		user.setRatings(ratingList);
		return user;
	}

}
